name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: Creating .env file
        run: |
          mkdir -p .env
          echo "ENVIRONMENT=$ENVIRONMENT" > .env/dev.env
          echo "APP_DATABASE_NAME=$APP_DATABASE_NAME" >> .env/dev.env
          echo "DATABASE_URL=$DATABASE_URL" >> .env/dev.env
          echo "SECRET_KEY=$SECRET_KEY" >> .env/dev.env
          echo "ALGORITHM=$ALGORITHM" >> .env/dev.env
          echo "DEFAULT_ADMIN_EMAIL=$DEFAULT_ADMIN_EMAIL" >> .env/dev.env
          echo "DEFAULT_ADMIN_PASSWORD=$DEFAULT_ADMIN_PASSWORD" >> .env/dev.env
        shell: bash
        env:
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
          APP_DATABASE_NAME: ${{ secrets.APP_DATABASE_NAME }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
          DEFAULT_ADMIN_EMAIL: ${{ secrets.DEFAULT_ADMIN_EMAIL }}
          DEFAULT_ADMIN_PASSWORD: ${{ secrets.DEFAULT_ADMIN_PASSWORD }}

      - name: "Run tests"
        run: chmod +x bin/linux/test.sh && ./bin/linux/test.sh

  build-deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        working-directory: app
        run: docker build -t eventorize-api:latest -f Dockerfile.prod .

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa,ecdsa,ed25519 "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Check and update Docker Compose on VPS
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Check Docker Compose version
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found, installing..."
              curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            else
              COMPOSE_VERSION=$(docker-compose version --short)
              echo "Current Docker Compose version: $COMPOSE_VERSION"

              # Update if version is too old (optional)
              if [[ "$COMPOSE_VERSION" < "1.29" ]]; then
                echo "Updating Docker Compose..."
                curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi
            fi

            # Verify the version after potential update
            docker-compose version
          EOF

      - name: Save and transfer Docker image and compose file
        run: |
          docker save eventorize-api:latest | ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "cat > ~/eventorize-api.tar"
          scp docker-compose-product.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/root/eventorize-huflit-api/

      - name: Prepare environment and deploy
        run: |
          echo "${{ secrets.PROD_ENV }}" > prod.env
          echo "${{ secrets.DB_ENV }}" > db.env
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "mkdir -p /root/eventorize-huflit-api/.env"
          scp prod.env db.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:/root/eventorize-huflit-api/.env/
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /root/eventorize-huflit-api
            docker load < ~/eventorize-api.tar

            # Check if docker-compose file is valid
            docker-compose -f docker-compose-product.yml config > /dev/null

            if docker-compose -f docker-compose-product.yml ps | grep api; then
              docker-compose -f docker-compose-product.yml stop api
              docker-compose -f docker-compose-product.yml rm -f api
            fi

            docker-compose -f docker-compose-product.yml up -d api
            docker image prune -f
            rm ~/eventorize-api.tar

            # Verify deployment
            if docker ps | grep eventorize-api; then
              echo "Deployment successful!"
            else
              echo "Deployment failed!"
              docker-compose -f docker-compose-product.yml logs api
              exit 1
            fi
          EOF
