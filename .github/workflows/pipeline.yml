name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: Creating .env file
        run: |
          mkdir -p .env
          echo "ENVIRONMENT=$ENVIRONMENT" > .env/dev.env  # Changed from test.env to dev.env
          echo "APP_DATABASE_NAME=$APP_DATABASE_NAME" >> .env/dev.env
          echo "DATABASE_URL=$DATABASE_URL" >> .env/dev.env
          echo "SECRET_KEY=$SECRET_KEY" >> .env/dev.env
          echo "ALGORITHM=$ALGORITHM" >> .env/dev.env
          echo "DEFAULT_ADMIN_EMAIL=$DEFAULT_ADMIN_EMAIL" >> .env/dev.env
          echo "DEFAULT_ADMIN_PASSWORD=$DEFAULT_ADMIN_PASSWORD" >> .env/dev.env
        shell: bash
        env:
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
          APP_DATABASE_NAME: ${{ secrets.APP_DATABASE_NAME }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
          DEFAULT_ADMIN_EMAIL: ${{ secrets.DEFAULT_ADMIN_EMAIL }}
          DEFAULT_ADMIN_PASSWORD: ${{ secrets.DEFAULT_ADMIN_PASSWORD }}

      - name: "Run tests"
        run: chmod +x bin/linux/test.sh && ./bin/linux/test.sh

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        working-directory: app
        run: docker build -t eventorize-api:latest -f Dockerfile.prod .

      - name: Save Docker image
        run: docker save eventorize-api:latest > eventorize-api.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: eventorize-api.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa,ecdsa,ed25519 "$VPS_HOST" >> ~/.ssh/known_hosts

      - name: Copy deployment files
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          # Copy both Docker image and compose file
          scp eventorize-api.tar $VPS_USERNAME@$VPS_HOST:~/
          scp docker-compose-product.yml $VPS_USERNAME@$VPS_HOST:/root/Eventorize_API_Huflit/

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          ssh $VPS_USERNAME@$VPS_HOST << 'EOF'
            set -e # Exit on any error

            echo "Starting deployment process..."
            
            # Create deployment log
            exec 1> >(tee -a "/root/deployment.log") 2>&1
            echo "Deployment started at $(date)"

            # Verify project directory
            if [ ! -d "/root/Eventorize_API_Huflit" ]; then
              echo "Creating project directory..."
              mkdir -p /root/Eventorize_API_Huflit
            fi

            cd /root/Eventorize_API_Huflit
            echo "Current directory: $(pwd)"

            # Verify docker-compose file
            if [ ! -f "docker-compose-product.yml" ]; then
              echo "ERROR: docker-compose-product.yml not found!"
              echo "Directory contents:"
              ls -la
              exit 1
            fi

            echo "Loading Docker image..."
            docker load < ~/eventorize-api.tar

            echo "Checking for existing containers..."
            if docker-compose -f docker-compose-product.yml ps | grep -q api; then
              echo "Stopping existing containers..."
              docker-compose -f docker-compose-product.yml stop api
              docker-compose -f docker-compose-product.yml rm -f api
            fi

            echo "Starting new containers..."
            docker-compose -f docker-compose-product.yml up -d api

            # Verify container is running
            echo "Verifying deployment..."
            sleep 10  # Wait for container to fully start
            if docker ps | grep -q eventorize-api; then
              echo "Container is running"
              
              # Check if service is responding (adjust port as needed)
              if curl -s -f http://localhost:3000/health 2>&1 > /dev/null; then
                echo "Service is responding"
              else
                echo "WARNING: Service is not responding on health check"
              fi
            else
              echo "ERROR: Container is not running"
              docker ps
              docker-compose -f docker-compose-product.yml logs api
              exit 1
            fi

            echo "Cleaning up..."
            docker image prune -f
            rm ~/eventorize-api.tar

            echo "Deployment completed at $(date)"
            
            # Print container logs
            echo "Recent container logs:"
            docker-compose -f docker-compose-product.yml logs --tail=100 api
          EOF

      - name: Verify Deployment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
        run: |
          echo "Checking deployment status..."
          ssh $VPS_USERNAME@$VPS_HOST "docker ps | grep eventorize-api" || {
            echo "Deployment verification failed"
            exit 1
          }
          echo "Deployment verified successfully"
